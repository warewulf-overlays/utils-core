#!/usr/bin/env python3

# Author: griznog
# Purpose: Allow pulling and applying overlays to a live node, limiting 
#          the available set to overlays configured for the node.

import os, sys, re, socket, argparse
import json, yaml
import subprocess

# Some things that are available via rpm but may not be installed  by default.
try:
    import libarchive
except:
    print("Please 'dnf install python3-libarchive-c'")
    sys.exit(1)

try:
    import requests
except:
    print("Please 'dnf install python3-requests'")
    sys.exit(1)

# Read/parse config to get the configured overlays for this node.
def read_config(config):
    # Read node config file
    with open(config) as f:
        node_conf = yaml.load(f)
    return node_conf

# Update a single overlay, processing any hooks we find there.
def update_overlay(overlay):

    # Update hooks.
    post_update_hook = f'/warewulf/sbin/overlay.{overlay}.post-update.sh'
    pre_update_hook = f'/warewulf/sbin/overlay.{overlay}.pre-update.sh'

    # Overlay image URL
    url=f"http://{wwmaster}:9873/overlay-runtime/{hwaddr}?overlay={overlay}&compress=gz"

    # Destination to save the downloaded image file
    overlay_image = f'/warewulf/tmp/{overlay}.img.gz'

    # Download the cpio.gz file
    response = requests.get(url, stream=True)
    response.raise_for_status()

    with open(overlay_image, 'wb') as file:
        for chunk in response.iter_content(chunk_size=8192):
            file.write(chunk)

    # Run the pre-update hook if it exists.
    if os.path.exists(pre_update_hook):
        status, output = subprocess.getstatusoutput(pre_update_hook)
        print(f'Pre-update hook for {overlay}:')
        print(output)

    # Extract the cpio image using libarchive
    if os.path.exists(overlay_image):
        try:
            # Change our working directory to the target for the extraction.
            original_cwd = os.getcwd()
            os.chdir(dest)

            # Extract
            libarchive.extract_file(overlay_image)
        finally:
            # Change back to original working directory.
            os.chdir(original_cwd)
            # Remove the downloaded file after extraction
            os.remove(overlay_image)
    else:
        print(f'Overlay image for {overlay} not downloaded.')
        return False

    # Run the pre-update hoook if it exists.
    if os.path.exists(post_update_hook):
        status, output = subprocess.getstatusoutput(post_update_hook)
        print(f'Post-update hook for {overlay}:')
        print(output)

# Our command processing functions.
def list_function(args):
    print('\n'.join(runtime_overlays))

def update_function(args):
    for overlay in args.overlays:
        update_overlay(overlay)

def update_all_function(args):
    for overlay in runtime_overlays:
        update_overlay(overlay)

if __name__ == "__main__":
    
    me = socket.gethostname().split()[0]
    default_config_file = '/warewulf/etc/node.yaml'

    parser = argparse.ArgumentParser("Warewulf Node Runtime Overlay Updater")
    parser.add_argument("--config",
                        help = "Configuration file. Defaults to %s" % default_config_file,
                        default = default_config_file)
    
    parser.add_argument("--dest",
                        help = "Specifies an optional directory to extract to, useful for debugging.",
                        default = '/')

    group_verbosity = parser.add_mutually_exclusive_group()
    group_verbosity.add_argument("--verbose",
                        help = "Increase output verbosity.",
                        action = "store_true",
                        default = False)
    group_verbosity.add_argument("--quiet",
                        help = "Quiet output, no headers.",
                        action = "store_true",
                        default = False)
    subparsers = parser.add_subparsers(dest="command")

    # 'list' command
    list_parser = subparsers.add_parser("list", help="List all runtime overlays configured for this node.")
    list_parser.set_defaults(func=list_function)

    # 'update' command
    update_parser = subparsers.add_parser("update", help="Update one or more specified runtime overlays.")
    update_parser.add_argument("overlays", nargs='+', help="Name(s) of the runtime overlay(s) to update")
    update_parser.set_defaults(func=update_function)

    # 'update-all' command
    update_all_parser = subparsers.add_parser("update-all", help="Update all runtime overlays configured for this node.")
    update_all_parser.set_defaults(func=update_all_function)


    args = parser.parse_args()

    if args.verbose:
        print(args)

    args = parser.parse_args()

    # Collect our config settings.
    node_config = read_config(args.config)
    runtime_overlays = node_config['nodeconfig']['runtime overlay']
    wwmaster = node_config['nodeconfig']['wwmaster']
    try:
        hwaddr = node_config['nodeconfig']['netdevs']['clusternet']['hwaddr']
    except:
        # The exepcted 'clusternet' wasn't found, so fall back hopefully
        # to the primary = true interface.
        netdev = node_config['nodeconfig']['netdevs'].keys()[0]
        hwaddr = node_config['nodeconfig']['netdevs'][netdev]['hwaddr']
    
    # Set destination directory, create if needed.
    dest = args.dest
    if dest != '/':
        os.path.exists(dest) or os.mkdir(dest, mode = 0o770)

 
    if hasattr(args, "func"):
        args.func(args)
    else:
        parser.print_help()

   
